@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject NotificacaoService notificacaoService
@inject ILocalStorageService localStorage


<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>

        @if (!string.IsNullOrEmpty(usuario))
        {
            <div class="top-row px-4 d-flex justify-content-end align-items-center" style="height: 60px;">
                <div class="user-info d-flex align-items-center gap-2">
                    <div class="user-avatar bg-primary text-white rounded-circle d-flex align-items-center justify-content-center" style="width: 36px; height: 36px; font-weight: bold;">
                        @usuario.Substring(0, 1).ToUpper()
                    </div>
                    <span class="fw-semibold">@usuario</span>
                    <button class="btn btn-sm btn-outline-danger" @onclick="() => Sair()">
                        <i class="bi bi-box-arrow-right me-1"></i> Sair
                    </button>
                </div>
            </div>

        }
        else
        {
            <div class="top-row px-4 d-flex justify-content-end align-items-center" style="height: 60px;">
                <div class="user-login d-flex align-items-center gap-2">
                    <button class="btn btn-sm btn-outline-primary" @onclick="() => Login()">
                        <i class="bi bi-box-arrow-in-right me-1"></i> Entrar
                    </button>
                </div>
            </div>
        }

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>


@code {

    string usuario = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            string usuarioLogado = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "usuario");

            usuario = usuarioLogado.Replace("\"", "");

        }
        else
        {
            usuario = "";

        }
    }

    private void Login()
    {
        Navigation.NavigateTo($"/login");
    }

    private async Task Sair()
    {
        var confirmado = await notificacaoService.MostrarConfirmacao("Atenção!", "Deseja deslogar o usuário?");

        if (confirmado)
        {
            // Remover o token
            await localStorage.RemoveItemAsync("authToken");
            // Remover o usuário

            // await localStorage.RemoveItemAsync("usuario");

            Navigation.NavigateTo("/login", forceLoad: true); // forceLoad pode ajudar se o redirecionamento não estiver funcionando direito
        }
    }
}