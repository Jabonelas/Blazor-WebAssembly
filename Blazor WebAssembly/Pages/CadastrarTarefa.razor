@page "/cadastrar-tarefa"
@using Blazor_WebAssembly.DTOs
@using Blazor_WebAssembly.DTOs.Tarefa
@using Blazor_WebAssembly.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json
@using System.Text
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http
@inject ITarefaService ITarefaService
@inject IJSRuntime JS
@inject NotificacaoService notificacaoService
@inject AuthenticationStateProvider AuthenticationStateProvider


<EditForm Model="@TarefaAlterarDTO" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    @* <ValidationSummary /> *@

    <div class="card edit-form">
        <div class="card-header bg-primary text-white">
            <h3>Cadastrar Nova Tarefa</h3>
        </div>
        <div class="card-body">
            <!-- Campos organizados em grid -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label fw-bold">Título</label>
                    <InputText @bind-Value="TarefaAlterarDTO.titulo" class="form-control" />
                    <ValidationMessage For="@(() => TarefaAlterarDTO.titulo)" class="text-danger" />
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-bold">Prioridade</label>
                    <InputSelect @bind-Value="TarefaAlterarDTO.prioridade" class="form-select">
                        <option value=""></option>
                        <option value="Alta">Alta</option>
                        <option value="Média">Média</option>
                        <option value="Baixa">Baixa</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => TarefaAlterarDTO.prioridade)" class="text-danger" />
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-bold">Prazo (dias)</label>
                    <InputNumber @bind-Value="TarefaAlterarDTO.prazo" class="form-control" />
                    <ValidationMessage For="@(() => TarefaAlterarDTO.prazo)" class="text-danger" />
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label fw-bold ">Descrição</label>
                <InputTextArea @bind-Value="TarefaAlterarDTO.descricao"
                               class="form-control"
                               rows="4" />
                <ValidationMessage For="@(() => TarefaAlterarDTO.descricao)" class="text-danger" />
            </div>

            <div class="row">
                <div class="col-md-6">
                    <label class="form-label fw-bold">Status</label>
                    <InputSelect @bind-Value="TarefaAlterarDTO.status" class="form-select">
                        <option value=""></option>
                        <option value="Pendente">Pendente</option>
                        <option value="Em Progresso">Em Progresso</option>
                        <option value="Concluído">Concluído</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => TarefaAlterarDTO.status)" class="text-danger" />
                </div>
            </div>
        </div>
        <div class="card-footer text-end">
            <button type="button" class="btn btn-secondary me-2" @onclick="() => CancelarAlteracao()">Cancelar</button>
            <button type="submit" class="btn btn-primary">Salvar</button>
        </div>
    </div>
</EditForm>


@code {

    private TarefaAlterarDTO TarefaAlterarDTO = new TarefaAlterarDTO();


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            await notificacaoService.MostrarErro("Sessão expirada. Por favor, faça login novamente.");

            Navigation.NavigateTo("/login");
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            var (sucesso, errorMessage) = await ITarefaService.CadastrarTarefaAsync(TarefaAlterarDTO);

            if (sucesso)
            {
                await notificacaoService.MostrarSucesso("Tarefa cadastrada com sucesso!");
            }
            else
            {
                await notificacaoService.MostrarErro(errorMessage);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao cadastrar tarefas: {ex.Message}");

            await notificacaoService.MostrarErro($"Ocorreu um erro interno. Nossa equipe já foi notificada.");
        }


    }

    private async void CancelarAlteracao()
    {
        bool confirmado = await notificacaoService.MostrarConfirmacao("Atenção!", "Tem certeza que deseja cancelar a alteração da tarefa?");

        if (confirmado)
        {
            Navigation.NavigateTo($"/tarefas");
        }
    }
}
