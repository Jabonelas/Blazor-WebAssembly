@page "/dashboard-tarefas"
@using Blazor_WebAssembly.DTOs.Tarefa
@using Blazor_WebAssembly.Interfaces
@inject HttpClient Http
@inject ITarefaService ITarefaService
@using Blazor_WebAssembly.Interfaces.Tarefa
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json
@using System.Text
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NotificacaoService notificacaoService
@inject IJSRuntime JS


<PageTitle>Dashboard de Tarefas</PageTitle>

<h1 class="main-title">Dashboard de Tarefas</h1>

<!-- Cards de Status -->
<div class="dashboard-container">
    <div class="status-grid">

        <!-- Card Pendentes -->
        <div class="status-card pending" @onclick="@(() => TarefasPendentes("Pendente"))">
            <div class="card-icon">
                <i class="fas fa-clock"></i>
            </div>
            <div class="card-content" style="color: #000; display: flex; flex-direction: column; align-items: center;" >
                <h3>Pendentes</h3>
                <div class="count">@PendenteCount</div>
                <div class="card-footer">Atualizado agora</div>
            </div>
        </div>

        <!-- Card Em Progresso -->
        <div class="status-card in-progress" @onclick="@(() => TarefasPendentes("Em Progresso"))">
            <div class="card-icon">
                <i class="fas fa-tasks"></i>
            </div>
            <div class="card-content" style="color: #000; display: flex; flex-direction: column; align-items: center;">
                <h3>Em Progresso</h3>
                <div class="count">@EmProgressoCount</div>
                <div class="card-footer">Atualizado agora</div>
            </div>
        </div>

        <!-- Card Concluídas -->
        <div class="status-card completed" @onclick="@(() => TarefasPendentes("Concluído"))">
            <div class="card-icon">
                <i class="fas fa-check-circle"></i>
            </div>
            <div class="card-content" style="color: #000; display: flex; flex-direction: column; align-items: center;">
                <h3>Concluídas</h3>
                <div class="count">@ConcluidoCount</div>
                <div class="card-footer">Atualizado agora</div>
            </div>
        </div>
    </div>


    <!-- Progresso Total -->
    <div class="progress-section">
        <div class="section-header">
            <h2><i class="fas fa-chart-line"></i> Progresso Total</h2>
        </div>

        <div class="progress-container">
            <div class="progress-labels">
                <span>Progresso</span>
                <span>@PorcentagemTarefasConcluidas%</span>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: @PorcentagemTarefasConcluidas%"></div>
            </div>
            <div class="progress-description">
                <i class="fas fa-info-circle"></i> Você completou @PorcentagemTarefasConcluidas% das tarefas cadastradas
            </div>
        </div>
    </div>

    <!-- Tarefas Prioritárias -->
    <div class="priority-section">
        <div class="section-header">
            <h2><i class="fas fa-exclamation-triangle"></i> Tarefas Prioritárias</h2>
            <span class="badge">@listaTarefasPrioridadeAlta.Count itens</span>
        </div>

        <div class="priority-list">
            @foreach (var item in listaTarefasPrioridadeAlta)
            {
                <div class="priority-item">
                    <div class="task-info">
                        <span class="task-title">@item.Titulo</span>
                        <span class="task-status @item.Status.ToLower()">@item.Status</span>
                    </div>
                    <div class="task-meta">
                        <span class="task-date"><i class="far fa-calendar-alt"></i>Criado: @item.Data</span>
                        @if (@item.Prazo > 0)
                        {
                            <span class="task-deadline"><i class="far fa-clock"></i> Prazo: @item.Prazo dia(s) restante(s)</span>
                        }
                        else
                        {
                            <span class="task-deadline"><i class="far fa-clock"></i> Prazo: @item.Prazo.ToString().Replace("-", "") dia(s) de atraso</span>
                        }
                    </div>
                </div>
            }
        </div>
    </div>


</div>





@code {



    private int PendenteCount = 0;
    private int EmProgressoCount = 0;
    private int ConcluidoCount = 0;
    private decimal PorcentagemTarefasConcluidas = 0;
    private List<TarefaPrioridadeAltaDTO> listaTarefasPrioridadeAlta = new List<TarefaPrioridadeAltaDTO>();



    protected override async Task OnInitializedAsync()
    {
        await CarregarInformacoesStatusAsync();

        await CarregarTarefasPrioridadeAltaAsync();
    }

    private async Task CarregarInformacoesStatusAsync()
    {
        try
        {
            var (success, errorMessage, TarefaQtdStatus) = await ITarefaService.BuscarQtdStatusTarefaAsync();

            if (success)
            {
                PendenteCount = TarefaQtdStatus.Pendente;
                EmProgressoCount = TarefaQtdStatus.EmProgresso;
                ConcluidoCount = TarefaQtdStatus.Concluido;
                PorcentagemTarefasConcluidas = TarefaQtdStatus.PorcentagemConcluidas;
            }
            else
            {
                await notificacaoService.MostrarErro(errorMessage);
            }
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Erro ao buscar quantidade status tarefa: {ex.Message}");

            await notificacaoService.MostrarErro($"Ocorreu um erro interno. Nossa equipe já foi notificada.");
        }
    }



    private async Task CarregarTarefasPrioridadeAltaAsync()
    {
        try
        {
            var (success, errorMessage, listaTarefaPrioridadeAlta) = await ITarefaService.BuscarTarefasPrioridadeAltaAsync();

            if (success && listaTarefaPrioridadeAlta != null)
            {
                listaTarefasPrioridadeAlta = listaTarefaPrioridadeAlta;
            }
            else
            {
                await notificacaoService.MostrarErro(errorMessage);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar porcentagem de tarefas concluidas: {ex.Message}");

            await notificacaoService.MostrarErro($"Ocorreu um erro interno. Nossa equipe já foi notificada.");
        }
    }

    private void TarefasPendentes(string status)
    {

        Navigation.NavigateTo($"/tarefa-rolagem/{status}");
    }
}
