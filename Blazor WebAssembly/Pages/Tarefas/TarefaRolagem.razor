@page "/tarefa-rolagem/{status}"
@using Blazor_WebAssembly.ViewModel.Tarefa
@inject TarefaRolagemViewModel TarefaRolagemViewModel
@inject IJSRuntime JSRuntime

<PageTitle>Tarefas</PageTitle>

<h1 class="main-title">@TarefaRolagemViewModel.titulo</h1>

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <button class="btn btn-primary" @onclick="TarefaRolagemViewModel.NovaTarefa">
            <i class="bi bi-plus-circle me-1"></i> Nova Tarefa
        </button>
    </div>

    @if (!TarefaRolagemViewModel.tarefas.Any() && !TarefaRolagemViewModel.isLoading)
    {
        <div class="text-center my-5 text-muted">
            <i class="bi bi-inbox fs-1 mb-3"></i>
            <p class="fs-5">Nenhuma tarefa encontrada</p>
            <button class="btn btn-primary" @onclick="TarefaRolagemViewModel.NovaTarefa">
                Criar primeira tarefa
            </button>
        </div>
    }

    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var tarefa in TarefaRolagemViewModel.tarefas)
        {
            <div class="col">
                <div class="card shadow-sm border-0 h-100 tarefa-card @TarefaRolagemViewModel.PegandoClassPrioridade(tarefa.Prioridade) @TarefaRolagemViewModel.PegandoClassStatus(tarefa.Status)">
                    <div class="card-body d-flex flex-column justify-content-between" @onclick="() => TarefaRolagemViewModel.VisualizarTarefa(tarefa.Id)">
                        <div>
                            <div class="d-flex justify-content-between mb-2">
                                <span class="badge bg-secondary @TarefaRolagemViewModel.PegandoClassPrioridade(tarefa.Prioridade)">
                                    <i class="bi @(TarefaRolagemViewModel.PegandoIconePrioridade(tarefa.Prioridade)) me-1"></i> @tarefa.Prioridade
                                </span>
                                <span class="badge bg-info @TarefaRolagemViewModel.PegandoClassStatus(tarefa.Status)">
                                    <i class="bi @(TarefaRolagemViewModel.PegandoIconeStatus(tarefa.Status)) me-1"></i> @tarefa.Status
                                </span>
                            </div>
                            <h5 class="card-title">@tarefa.Titulo</h5>
                            @if (!string.IsNullOrEmpty(tarefa.Descricao))
                            {
                                <p class="card-text text-muted small">@tarefa.Descricao</p>
                            }
                        </div>
                        <div class="d-flex justify-content-between align-items-center mt-3 text-muted small">
                            <span><i class="bi bi-calendar me-1"></i>Criado: @TarefaRolagemViewModel.FormatandoData(tarefa.Data)</span>
                            @if (tarefa.Prazo > 0)
                            {
                                <span><i class="bi bi-clock me-1"></i>Prazo estipulado: @tarefa.Prazo dia(s)</span>
                            }
                        </div>
                    </div>
                    <div class="card-footer bg-transparent border-0 d-flex justify-content-end gap-2">
                        <button class="btn btn-sm btn-outline-primary" title="Visualizar" @onclick="() => TarefaRolagemViewModel.VisualizarTarefa(tarefa.Id)">
                            <i class="bi bi-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-warning" title="Editar" @onclick="() => TarefaRolagemViewModel.EditarTarefa(tarefa.Id)">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" title="Excluir" @onclick="() => TarefaRolagemViewModel.ConfirmarExclusaoAsync(tarefa.Id)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (TarefaRolagemViewModel.isLoading)
    {
        <div class="text-center my-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Carregando...</span>
            </div>
        </div>
    }

    <div @ref="sentinel" tarefa-sentinela style="height: 1px;"></div>
</div>

@code {
   
    [Parameter]
    public string? status { get; set; }

    private DotNetObjectReference<TarefaRolagem>? objRef;
    private IJSObjectReference? infiniteScrollModule;
    private IJSObjectReference? observerInstance;
    private ElementReference sentinel;

    protected override async Task OnInitializedAsync()
    {
        TarefaRolagemViewModel.OnStateChanged += StateHasChanged;
        await TarefaRolagemViewModel.VertificarSecaoValidaAsync(status);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                infiniteScrollModule = await JSRuntime.InvokeAsync<IJSObjectReference>(
                    "import", "./js/infiniteScroll.js");

                objRef = DotNetObjectReference.Create(this);
                observerInstance = await infiniteScrollModule.InvokeAsync<IJSObjectReference>(
                    "initObserver", sentinel, objRef);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro na inicialização do observer: {ex.Message}");
                TarefaRolagemViewModel.hasMoreItems = true;
                StateHasChanged();
            }
        }
    }

    [JSInvokable]
    public async Task CarregandoMaisItensAsync()
    {
        await TarefaRolagemViewModel.CarregandoMaisItensAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await TarefaRolagemViewModel.ResetandoPaginacaoAsync();
    }

    public async Task ChecandoVisibilidadeSentinelAsync()
    {
        try
        {
            if (infiniteScrollModule != null)
            {
                var isVisible = await infiniteScrollModule.InvokeAsync<bool>(
                    "checkVisibility", sentinel);

                if (isVisible && TarefaRolagemViewModel.hasMoreItems && !TarefaRolagemViewModel.isLoading)
                {
                    await TarefaRolagemViewModel.CarregandoMaisItensAsync();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao verificar sentinela: {ex.Message}");
        }
    }

    public void Dispose()
    {
        TarefaRolagemViewModel.OnStateChanged -= StateHasChanged;

        if (observerInstance != null)
        {
            _ = observerInstance.InvokeVoidAsync("dispose");
            _ = observerInstance.DisposeAsync();
        }
        infiniteScrollModule?.DisposeAsync();
        objRef?.Dispose();
    }

}