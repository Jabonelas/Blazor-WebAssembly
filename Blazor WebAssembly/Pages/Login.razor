@page "/login"
@using Blazor_WebAssembly.DTOs.Usuario
@using Blazor_WebAssembly.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json
@using System.Text
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IUsuarioService iUsuarioService
@inject NotificacaoService notificacaoService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager


<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow-lg p-4" style="width: 100%; max-width: 400px;">
        <h3 class="text-center mb-4">Acesse sua conta</h3>

        <EditForm Model="@UsuarioLoginDTO" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label class="form-label text-muted">Usuário</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-person"></i></span>
                    <InputText @bind-Value="UsuarioLoginDTO.login" class="form-control" placeholder="Digite seu usuário" />
                </div>
                <ValidationMessage For="@(() => UsuarioLoginDTO.login)" class="text-danger small" />
            </div>

            <div class="mb-4">
                <label class="form-label text-muted">Senha</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-lock"></i></span>
                    <InputText @bind-Value="UsuarioLoginDTO.senha" type="password" class="form-control" placeholder="Digite sua senha" />
                </div>
                <ValidationMessage For="@(() => UsuarioLoginDTO.senha)" class="text-danger small" />
            </div>

         
            <div class="d-grid mb-2">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-box-arrow-in-right me-1"></i> Entrar
                </button>
            </div>
            <div class="d-grid">
                <button type="button" class="btn btn-outline-secondary" @onclick="CriarConta">
                    <i class="bi bi-person-plus me-1"></i> Criar uma conta
                </button>
            </div>


        </EditForm>
    </div>
</div>


@code {

    private UsuarioLoginDTO UsuarioLoginDTO = new UsuarioLoginDTO();

    protected override async Task OnInitializedAsync()
    {
        string? usuarioLogado = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "usuario");

        if (!string.IsNullOrEmpty(usuarioLogado))
        {
            UsuarioLoginDTO.login =  usuarioLogado.Replace("\"", "");
            
        }
    }

    private void CriarConta()
    {
        NavigationManager.NavigateTo("/cadastrar-usuario");
    }

    private async Task HandleSubmit()
    {
        try
        {
            var (sucesso, mensagemErro) = await iUsuarioService.LoginAsync(UsuarioLoginDTO);

            if (sucesso)
            {
                await notificacaoService.MostrarSucesso("Login realizado com sucesso!");

                Navigation.NavigateTo("/", forceLoad: true);

                // Navigation.NavigateTo("/tarefas");
            }
            else
            {
                await notificacaoService.MostrarErro(mensagemErro);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao realizar login: {ex.Message}");

            await notificacaoService.MostrarErro($"Ocorreu um erro interno. Nossa equipe já foi notificada.");
        }
    }
}
