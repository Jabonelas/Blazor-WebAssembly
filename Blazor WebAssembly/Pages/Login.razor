@page "/login"
@using Blazor_WebAssembly.DTOs.Usuario
@using Blazor_WebAssembly.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json
@using System.Text
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IUsuarioService iUsuarioService
@inject NotificacaoService notificacaoService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<h1>Login</h1>

<EditForm Model="@UsuarioLoginDTO" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    @* <ValidationSummary /> *@

    <div class="live-preview">
        <div class="row g-3">

            <p class="text-muted">Usuário</p>

            <div class="col-lg-6">
                <div class="form-floating">
                    <InputText @bind-Value="UsuarioLoginDTO.login" class="form-control" />
                    <label>Usuário</label>
                    <ValidationMessage For="@(() => UsuarioLoginDTO.login)" />
                </div>
            </div>

            <p class="text-muted">Senha</p>

            <div class="col-lg-4">
                <div class="form-floating">
                    <InputText type="password" @bind-Value="UsuarioLoginDTO.senha" class="form-control" />
                    <label>Senha</label>
                    <ValidationMessage For="@(() => UsuarioLoginDTO.senha)" />
                </div>
            </div>

            <div class="col-lg-12">
                <div class="text-end">
                    <button type="submit" class="btn btn-primary">Logar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {


    private UsuarioLoginDTO UsuarioLoginDTO = new UsuarioLoginDTO();

    protected override async Task OnInitializedAsync()
    {
        string? usuarioLogado = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "usuario");

        if (!string.IsNullOrEmpty(usuarioLogado))
        {
            UsuarioLoginDTO.login =  usuarioLogado.Replace("\"", "");
            
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            var (sucesso, mensagemErro) = await iUsuarioService.LoginAsync(UsuarioLoginDTO);

            if (sucesso)
            {
                await notificacaoService.MostrarSucesso("Login realizado com sucesso!");

                Navigation.NavigateTo("/", forceLoad: true);

                // Navigation.NavigateTo("/tarefas");
            }
            else
            {
                await notificacaoService.MostrarErro(mensagemErro);
            }
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao realizar login: {ex.Message}");

            await notificacaoService.MostrarErro($"Ocorreu um erro interno. Nossa equipe já foi notificada.");
        }
    }

}
