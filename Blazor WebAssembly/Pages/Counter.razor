@page "/counter"
@using Blazor_WebAssembly.DTOs
@using Blazor_WebAssembly.Interfaces
@using Newtonsoft.Json
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ITarefaService ITarefaService


<PageTitle>Counter</PageTitle>

<h1>Counter</h1>


@if (listaTarefas == null)
{
    <p>Carregando...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Titulo</th>
                <th>Descricao</th>
                <th>Prioridade</th>
                <th>Prazo</th>
                <th>Status</th>
                <th>Data</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tarefa in listaTarefas)
            {
                <tr>
                    <td>@tarefa.id</td>
                    <td>@tarefa.titulo</td>
                    <td>@tarefa.descricao</td>
                    <td>@tarefa.prioridade</td>
                    <td>@tarefa.prazo</td>
                    <td>@tarefa.status</td>
                    <td>@tarefa.data</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    private List<TarefaConsultaDTO> listaTarefas = new List<TarefaConsultaDTO>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var tarefas = await ITarefaService.ObterTarefasAsync();
            listaTarefas = tarefas;
        }
        catch (UnauthorizedAccessException)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Sua sessão expirou ou o acesso não é autorizado.\nVocê será redirecionado para a tela de login.");
            NavigationManager.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao obter tarefas: {ex.Message}");
        }
    }
}
