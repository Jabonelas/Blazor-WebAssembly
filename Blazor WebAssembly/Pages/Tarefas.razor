@page "/tarefas"
@using Blazor_WebAssembly.DTOs
@using Blazor_WebAssembly.Interfaces
@using Newtonsoft.Json
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Navigation
@inject ITarefaService ITarefaService
@inject IJSRuntime JS

<PageTitle>Tarefas</PageTitle>


@if (listaTarefas == null)
{
    <p>Carregando...</p>
}
else
{

    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Lista das Tarefas</h5>
            <div>
                <button class="btn btn-light btn-sm" @onclick="() => NovaTarefa()">
                    <i class="bi bi-plus-circle"></i> Nova Tarefa
                </button>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            @* <th width="5%">ID</th> *@
                            <th>Título</th>
                            <th width="15%">Prioridade</th>
                            <th width="10%">Prazo</th>
                            <th width="12%">Status</th>
                            @* <th width="12%">Data</th> *@
                            <th width="15%" class="text-end">Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!listaTarefas.Any())
                        {
                            <tr>
                                <td colspan="7" class="text-center py-4 text-muted">
                                    <i class="bi bi-inbox" style="font-size: 2rem;"></i>
                                    <p class="mt-2 mb-0">Nenhuma tarefa cadastrada</p>
                                    <button class="btn btn-primary btn-sm mt-2" @onclick="() => NovaTarefa()">
                                        Criar primeira tarefa
                                    </button>
                                </td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var tarefa in listaTarefas)
                            {
                                <tr class="@GetRowClass(tarefa)">
                                    @* <td>@tarefa.id</td> *@
                                    <td>
                                        <div class="fw-semibold">@tarefa.titulo</div>
                                        @if (!string.IsNullOrEmpty(tarefa.descricao))
                                        {
                                            <div class="text-muted small text-truncate" style="max-width: 300px;"
                                                 title="@tarefa.descricao">
                                                @tarefa.descricao
                                            </div>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge @GetPriorityBadgeClass(tarefa.prioridade)">
                                            @tarefa.prioridade
                                        </span>
                                    </td>
                                    <td>
                                        @(tarefa.prazo > 0 ? $"{tarefa.prazo} dia(s)" : "-")
                                    </td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(tarefa.status)">
                                            @tarefa.status
                                        </span>
                                    </td>
                                    @* <td>@FormatDate(tarefa.data)</td> *@
                                    <td class="text-end">
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary d-flex align-items-center gap-1"
                                                    @onclick="() => VisualizarTarefa(tarefa.id)">
                                                <i class="bi bi-eye"></i>
                                                <span class="d-none d-sm-inline">Visualizar</span>
                                            </button>
                                            <button class="btn btn-sm btn-outline-secondary d-flex align-items-center gap-1"
                                                    @onclick="() => EditarTarefa(tarefa.id)">
                                                <i class="bi bi-pencil"></i>
                                                <span class="d-none d-sm-inline">Editar</span>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger d-flex align-items-center gap-1"
                                                    @onclick="() => ConfirmarExclusao(tarefa.id)">
                                                <i class="bi bi-trash"></i>
                                                <span class="d-none d-sm-inline">Excluir</span>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        @if (listaTarefas.Any())
        {
            <div class="card-footer d-flex justify-content-between align-items-center">
                <div class="text-muted small">
                    Mostrando @listaTarefas.Count() itens
                </div>
           @*      <nav>
                    <ul class="pagination pagination-sm mb-0">
                        <li class="page-item disabled">
                            <a class="page-link" href="#" tabindex="-1">Anterior</a>
                        </li>
                        <li class="page-item active"><a class="page-link" href="#">1</a></li>
                        <li class="page-item"><a class="page-link" href="#">2</a></li>
                        <li class="page-item"><a class="page-link" href="#">3</a></li>
                        <li class="page-item">
                            <a class="page-link" href="#">Próxima</a>
                        </li>
                    </ul>
                </nav> *@
            </div>
        }
    </div>
} 


@code {

    private List<TarefaConsultaDTO> listaTarefas = new List<TarefaConsultaDTO>();
    private bool tarefasCarregadas = false;

    protected override async Task OnInitializedAsync()
    {
        await CarregarTarefasAsync();
    }

    //usado para recarregar o boostrap depois que a tela foi carregada
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (tarefasCarregadas)
    //     {
    //         tarefasCarregadas = false; // Reseta a flag pra não ficar chamando toda hora
    //         await JS.InvokeVoidAsync("bootstrapDropdownInit");

    //     }
    // }

    private async Task CarregarTarefasAsync()
    {
        try
        {
            var tarefas = await ITarefaService.ObterTarefasAsync();
            listaTarefas = tarefas;

            tarefasCarregadas = true; // Marca que carregou e precisa inicializar o dropdown
            StateHasChanged(); // Força o Blazor a re-renderizar depois de carregar

            await InvokeAsync(StateHasChanged);
        }
        catch (UnauthorizedAccessException)
        {
            await JS.InvokeVoidAsync("alert", "Sua sessão expirou ou o acesso não é autorizado.\nVocê será redirecionado para a tela de login.");
            Navigation.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao obter tarefas: {ex.Message}");
        }
    }

    private void VisualizarTarefa(int id)
    {
        Navigation.NavigateTo($"/exibir-tarefa/{id}");
    }

    private void EditarTarefa(int id)
    {
        Navigation.NavigateTo($"/editar-tarefa/{id}");
    }

    private void NovaTarefa()
    {
        Navigation.NavigateTo("cadastrar-tarefa");
    }

    private async Task ConfirmarExclusao(int _id)
    {
        bool confirmado = await JS.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir esta tarefa?");

        if (confirmado)
        {
            try
            {
                await ITarefaService.DeletarTarefaAsync(_id);

                bool isUsuarioDeletado = true;

                if (isUsuarioDeletado)
                {
                    await CarregarTarefasAsync();
                    await JS.InvokeVoidAsync("alert", "Tarefa excluída com sucesso!");
                    await CarregarTarefasAsync();
                }


            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Erro ao excluir: {ex.Message}");
            }
        }
    }

    private string GetPriorityBadgeClass(string prioridade)
    {
        return prioridade switch
        {
            "Alta" => "bg-danger",
            "Média" => "bg-warning text-dark",
            "Baixa" => "bg-success",
            _ => "bg-secondary"
        };
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pendente" => "bg-secondary",
            "Em Progresso" => "bg-info",
            "Concluído" => "bg-success",
            _ => "bg-light text-dark"
        };
    }

    private string GetRowClass(TarefaConsultaDTO tarefa)
    {
        if (tarefa.status == "Concluído") 
        {
            return "table-success";
        }
        else if (DateTime.Now > Convert.ToDateTime(tarefa.data).AddDays(tarefa.prazo))
        {
            return "table-danger";
        }
        return "";
    }

    private string FormatDate(object dateObj)
    {
        if (dateObj == null) return "-";
        if (dateObj is DateTime date) return date.ToString("dd/MM/yyyy");
        if (DateTime.TryParse(dateObj.ToString(), out var parsedDate)) return parsedDate.ToString("dd/MM/yyyy");
        return dateObj.ToString(); // Fallback para mostrar o valor original se não for data
    }

   
}