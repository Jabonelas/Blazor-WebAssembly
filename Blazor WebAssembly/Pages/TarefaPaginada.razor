@page "/tarefas-paginada"
@using Blazor_WebAssembly.DTOs.Tarefa
@using Blazor_WebAssembly.Interfaces
@using Blazor_WebAssembly.Interfaces.Tarefa
@using Microsoft.AspNetCore.Components.Authorization
@inject ITarefaService ITarefaService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@implements IDisposable
@inject NotificacaoService notificacaoService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Tarefas</PageTitle>

@if (listaTarefas == null)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Carregando...</span>
        </div>
    </div>
}
else
{
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Lista das Tarefas</h5>
            <div>
                <button class="btn btn-light btn-sm" @onclick="NovaTarefa">
                    <i class="bi bi-plus-circle"></i> Nova Tarefa
                </button>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive" @ref="tableContainer" style="max-height: 65vh; overflow-y: auto;">
                <table class="table table-hover mb-0">
                    <thead class="table-light" style="position: sticky; top: 0; z-index: 1; background-color: white;">
                        <tr>
                            <th>Id</th>
                            <th>Título</th>
                            <th width="15%">Prioridade</th>
                            <th width="10%">Prazo</th>
                            <th width="12%">Status</th>
                            <th width="15%" class="text-end">Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!listaTarefas.Any() && !isLoading)
                        {
                            <tr>
                                <td colspan="5" class="text-center py-4 text-muted">
                                    <i class="bi bi-inbox" style="font-size: 2rem;"></i>
                                    <p class="mt-2 mb-0">Nenhuma tarefa cadastrada</p>
                                    <button class="btn btn-primary btn-sm mt-2" @onclick="NovaTarefa">
                                        Criar primeira tarefa
                                    </button>
                                </td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var tarefa in listaTarefas)
                            {
                                <tr class="@GetRowClass(tarefa)">
                                    <td>
                                        <div class="fw-semibold">@tarefa.Id</div>
                                        <div class="fw-semibold">@tarefa.Titulo</div>
                                        @if (!string.IsNullOrEmpty(tarefa.Descricao))
                                        {
                                            <div class="text-muted small text-truncate" style="max-width: 300px;"
                                                 title="@tarefa.Descricao">
                                                @tarefa.Descricao
                                            </div>
                                        }
                                    </td>


                               

                                    <td>
                                        <span class="badge @GetPriorityBadgeClass(tarefa.Prioridade)">
                                            @tarefa.Prioridade
                                        </span>
                                    </td>
                                    <td>
                                        @(tarefa.Prazo > 0 ? $"{tarefa.Prazo} dia(s)" : "-")
                                    </td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(tarefa.Status)">
                                            @tarefa.Status
                                        </span>
                                    </td>
                                    <td class="text-end">
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary"
                                                    @onclick="() => VisualizarTarefa(tarefa.Id)"
                                                    title="Visualizar">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-secondary"
                                                    @onclick="() => EditarTarefa(tarefa.Id)"
                                                    title="Editar">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger"
                                                    @onclick="() => ConfirmarExclusao(tarefa.Id)"
                                                    title="Excluir">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>

                @if (isLoading)
                {
                    <div class="d-flex justify-content-center my-3">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Carregando...</span>
                        </div>
                    </div>
                }

                @if (!hasMoreItems && listaTarefas.Any())
                {
                    <div class="text-center text-muted py-3">
                        <small>Todas as tarefas foram carregadas</small>
                    </div>
                }

                <div @ref="sentinel" style="height: 1px;"></div>
            </div>
        </div>
    </div>
}

@code {
    private List<TarefaConsultaDTO> listaTarefas = new();
    private ElementReference tableContainer;
    private ElementReference sentinel;
    private DotNetObjectReference<TarefaPaginada>? objRef;
    private int currentPage = 1;
    private const int pageSize = 15;
    private bool isLoading = false;
    private bool hasMoreItems = true;
    private DateTime lastLoadTime = DateTime.MinValue;

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            await notificacaoService.MostrarErro("Sessão expirada. Por favor, faça login novamente.");

            Navigation.NavigateTo("/login");
        }


        await LoadMoreItems();


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("infiniteScroll.initialize", sentinel, objRef);
        }
    }

    [JSInvokable]
    public async Task LoadMoreItems()
    {
        // Debounce para evitar chamadas rápidas consecutivas
        if (DateTime.Now - lastLoadTime < TimeSpan.FromMilliseconds(300) || isLoading || !hasMoreItems)
            return;

        lastLoadTime = DateTime.Now;
        isLoading = true;
        StateHasChanged();

        try
        {
            var(success,errorMessage, items, totalCount) = await ITarefaService.ObterTarefasPaginadasAsync(currentPage, pageSize, "");

            if (success)
            {
                listaTarefas.AddRange(items);
                currentPage++;
                hasMoreItems = listaTarefas.Count < totalCount;

            }else
            {
                await notificacaoService.MostrarErro(errorMessage);

                if (errorMessage == "Sessão expirada. Por favor, faça login novamente.")
                {
                    Navigation.NavigateTo($"/login");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar tarefas: {ex.Message}");

            await notificacaoService.MostrarErro($"Ocorreu um erro interno. Nossa equipe já foi notificada.");
            hasMoreItems = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ResetPagination()
    {
        currentPage = 1;
        listaTarefas.Clear();
        hasMoreItems = true;
        await LoadMoreItems();
    }

    private void VisualizarTarefa(int id)
    {
        Navigation.NavigateTo($"/exibir-tarefa/{id}");
    }

    private void EditarTarefa(int id)
    {
        Navigation.NavigateTo($"/editar-tarefa/{id}");
    }

    private void NovaTarefa()
    {
        Navigation.NavigateTo("/cadastrar-tarefa");
    }

    private async Task ConfirmarExclusao(int id)
    {
        bool confirmado = await notificacaoService.MostrarConfirmacao("Atenção!", "Tem certeza que deseja excluir esta tarefa?");

        if (confirmado)
        {
            try
            {
                await ITarefaService.DeletarTarefaAsync(id);
                await ResetPagination();
                await notificacaoService.MostrarSucesso("Tarefa excluída com sucesso!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao excluir tarefas: {ex.Message}");

                await notificacaoService.MostrarErro($"Ocorreu um erro interno. Nossa equipe já foi notificada.");
            }
        }
    }

    private string GetPriorityBadgeClass(string prioridade)
    {
        return prioridade switch
        {
            "Alta" => "bg-danger",
            "Média" => "bg-warning text-dark",
            "Baixa" => "bg-success",
            _ => "bg-secondary"
        };
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pendente" => "bg-secondary",
            "Em Progresso" => "bg-info",
            "Concluído" => "bg-success",
            _ => "bg-light text-dark"
        };
    }

    private string GetRowClass(TarefaConsultaDTO tarefa)
    {
        if (tarefa.Status == "Concluído")
        {
            return "table-success";
        }
        else if (DateTime.Now > Convert.ToDateTime(tarefa.Data).AddDays(tarefa.Prazo))
        {
            return "table-danger";
        }
        return "";
    }

    public void Dispose()
    {
        objRef?.Dispose();
        GC.SuppressFinalize(this);
    }
}