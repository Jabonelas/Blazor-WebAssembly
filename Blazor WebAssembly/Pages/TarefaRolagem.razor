@page "/tarefa-rolagem"
@using Blazor_WebAssembly.DTOs.Tarefa
@using Blazor_WebAssembly.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject ITarefaService ITarefaService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@implements IDisposable
@inject NotificacaoService notificacaoService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Tarefas</PageTitle>

<div class="tarefas-container">
    <div class="tarefas-header">
        <h3>Minhas Tarefas</h3>
        <button class="btn btn-primary" @onclick="NovaTarefa">
            <i class="bi bi-plus-circle"></i> Nova Tarefa
        </button>
    </div>

    <div class="tarefas-grid">
        @if (!tarefas.Any() && !isLoading)
        {
            <div class="empty-state">
                <i class="bi bi-inbox"></i>
                <p>Nenhuma tarefa encontrada</p>
                <button class="btn btn-primary" @onclick="NovaTarefa">
                    Criar primeira tarefa
                </button>
            </div>
        }


        @foreach (var tarefa in tarefas)
        {
            <div class="tarefa-card @GetPriorityClass(tarefa.Prioridade) @GetStatusClass(tarefa.Status)" @onclick="() => VisualizarTarefa(tarefa.Id)">
                <div class="tarefa-header">
                    <span class="prioridade">@tarefa.Prioridade</span>
                    <span class="status">@tarefa.Status</span>
                </div>
                <div class="tarefa-content">
                    <h4>@tarefa.Id</h4>
                    <h4>@tarefa.Titulo</h4>
                    @if (!string.IsNullOrEmpty(tarefa.Descricao))
                    {
                        <p class="descricao">@tarefa.Descricao</p>
                    }
                    <div class="tarefa-meta">
                        <span><i class="bi bi-calendar"></i> @FormatDate(tarefa.Data)</span>
                        @if (tarefa.Prazo > 0)
                        {
                            <span><i class="bi bi-clock"></i> @tarefa.Prazo dia(s)</span>
                        }
                    </div>
                </div>
                <div class="tarefa-actions">
                    <button @onclick="() => VisualizarTarefa(tarefa.Id)" title="Visualizar">
                        <i class="bi bi-eye"></i>
                    </button>
                    <button @onclick="() => EditarTarefa(tarefa.Id)" title="Editar">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button @onclick="() => ConfirmarExclusao(tarefa.Id)" title="Excluir">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </div>
        }

        

        @if (isLoading)
        {
            <div class="loading-indicator">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Carregando...</span>
                </div>
            </div>
        }

      @*   <div @ref="sentinel" style="height: 1px;"></div> *@
        <!-- Substitua a div atual por: -->
        <div @ref="sentinel" tarefa-sentinela></div>

    @*     <button @onclick="LoadMoreItems" class="btn btn-secondary mt-3">
            Carregar Mais Manualmente
        </button> *@

 @*        <div style="position: fixed; bottom: 20px; left: 0; right: 0; text-align: center;">
            <button @onclick="LoadMoreItems" class="btn btn-secondary">
                Carregar Mais Manualmente
            </button>
        </div> *@


    </div>
</div>

@code {
    private List<TarefaConsultaDTO> tarefas = new();
    private ElementReference sentinel;
    private DotNetObjectReference<TarefaRolagem>? objRef;
    private int currentPage = 1;
    private const int pageSize = 12;
    private bool isLoading = false;
    private bool hasMoreItems = true;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            await notificacaoService.MostrarErro("Sessão expirada. Por favor, faça login novamente.");

            Navigation.NavigateTo("/login");
        }

        await LoadMoreItems();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);

            try
            {
                await Task.Delay(500); // Garante que o DOM está pronto
                await JS.InvokeVoidAsync("infiniteScroll.init", sentinel, objRef);
                Console.WriteLine("Scroll infinito iniciado com sucesso.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao iniciar scroll infinito: {ex.Message}");
            }
        }
    }

    [JSInvokable]
    public async Task LoadMoreItems()
    {
        Console.WriteLine($"Tentando carregar página {currentPage}...");

        // if (isLoading || !hasMoreItems)
        // {
        //     Console.WriteLine("Cancelado - já em progresso ou sem mais itens");
        //     return;
        // }

        isLoading = true;
        try
        {
            var (success, errorMessage, items, totalCount) = await ITarefaService.ObterTarefasPaginadasAsync(currentPage, pageSize);

            if (success)
            {
                if (items?.Count > 0)
                {
                    tarefas.AddRange(items);
                    currentPage++;
                }

                // ⚠️ Move esta verificação para fora do if
                hasMoreItems = tarefas.Count < totalCount;

                Console.WriteLine($"Página {currentPage - 1} carregada. Itens: {items?.Count}, Total acumulado: {tarefas.Count}/{totalCount}");

                await Task.Delay(300);
            }
            else
            {
                hasMoreItems = false;
                Console.WriteLine("Erro: " + errorMessage);
            }
        }

        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar itens: {ex.Message}");
            await notificacaoService.MostrarErro($"Erro ao carregar mais itens. {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }

    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    private string GetPriorityClass(string prioridade)
    {
        return prioridade switch
        {
            "Alta" => "prioridade-alta",
            "Média" => "prioridade-media",
            "Baixa" => "prioridade-baixa",
            _ => ""
        };
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Concluído" => "status-concluido",
            "Em Progresso" => "status-progresso",
            "Pendente" => "status-pendente",
            _ => ""
        };
    }

    private string FormatDate(object dateObj)
    {
        if (dateObj == null) return "-";
        if (dateObj is DateTime date) return date.ToString("dd/MM/yyyy");
        if (DateTime.TryParse(dateObj.ToString(), out var parsedDate)) return parsedDate.ToString("dd/MM/yyyy");
        return dateObj.ToString();
    }

    private void VisualizarTarefa(int id) => Navigation.NavigateTo($"/exibir-tarefa/{id}");
    private void EditarTarefa(int id) => Navigation.NavigateTo($"/editar-tarefa/{id}");
    private void NovaTarefa() => Navigation.NavigateTo("/cadastrar-tarefa");

    private async Task ConfirmarExclusao(int id)
    {
        bool confirmado = await notificacaoService.MostrarConfirmacao("Atenção!", "Tem certeza que deseja excluir esta tarefa?");

        if (confirmado)
        {
            try
            {
                await ITarefaService.DeletarTarefaAsync(id);
                await ResetPagination();
                await notificacaoService.MostrarSucesso("Tarefa excluída com sucesso!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao excluir tarefas: {ex.Message}");

                await notificacaoService.MostrarErro($"Ocorreu um erro interno. Nossa equipe já foi notificada.");
            }
        }
    }

    private async Task ResetPagination()
    {
        currentPage = 1;
        tarefas.Clear();
        hasMoreItems = true;
        await LoadMoreItems();
    }

 
}