@page "/login"
@using Blazor_WebAssembly.DTOs.Usuario
@using Blazor_WebAssembly.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json
@using System.Text
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IUsuarioService iUsuarioService
@inject NotificacaoService notificacaoService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager



<div class="container-fluid min-vh-100 p-0">
    <div class="row g-0 min-vh-100">
        <!-- Painel Esquerdo (Background) -->
        <div class="col-lg-5 d-none d-lg-block" style="background: linear-gradient(135deg, #1e3a8a 0%, #1e40af 100%);">
            <div class="h-100 d-flex flex-column justify-content-center text-white p-5">
                <div style="max-width: 500px;">
                    <h1 class="display-5 mb-4"><i class="bi bi-shield-lock"></i> Bem-vindo ao OrgaTask</h1>
                    <p class="lead mb-5">Acesse sua conta para gerenciar suas tarefas e aumentar sua produtividade.</p>

                    <div class="d-flex align-items-center mb-3">
                        <i class="bi bi-check-circle-fill fs-4 me-3"></i>
                        <span>Controle suas tarefas de forma eficiente</span>
                    </div>
                    <div class="d-flex align-items-center mb-3">
                        <i class="bi bi-check-circle-fill fs-4 me-3"></i>
                        <span>Organize por prioridades e prazos</span>
                    </div>
                    <div class="d-flex align-items-center">
                        <i class="bi bi-check-circle-fill fs-4 me-3"></i>
                        <span>Acompanhe seu progresso diário</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Painel Direito (Formulário) -->
        <div class="col-lg-7 d-flex align-items-center justify-content-center p-4 bg-light">
            <div class="w-100" style="max-width: 400px;">
                <div class="card shadow-sm border-0">
                    <div class="card-body p-4">
                        <h3 class="text-center mb-4"><i class="bi bi-box-arrow-in-right"></i> Acesse sua conta</h3>

                        <EditForm Model="@UsuarioLoginDTO" OnValidSubmit="@HandleSubmit">
                            <DataAnnotationsValidator />

                            <!-- Usuário -->
                            <div class="mb-4">
                                <label class="form-label fw-bold">Usuário</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light"><i class="bi bi-person"></i></span>
                                    <InputText @bind-Value="UsuarioLoginDTO.login"
                                               class="form-control form-control-lg"
                                               placeholder="Digite seu usuário" />
                                </div>
                                <ValidationMessage For="@(() => UsuarioLoginDTO.login)" class="text-danger small" />
                            </div>

                            <!-- Senha com botão para mostrar/esconder -->
                            <div class="mb-4">
                                <label class="form-label fw-bold">Senha</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light"><i class="bi bi-lock"></i></span>
                                    <InputText @bind-Value="UsuarioLoginDTO.senha"
                                               type="password"
                                               class="form-control form-control-lg"
                                               placeholder="Digite sua senha"
                                               id="passwordField" />
                                    <button class="btn btn-outline-secondary"
                                            type="button"
                                            onclick="togglePassword('passwordField')">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => UsuarioLoginDTO.senha)" class="text-danger small" />
                            </div>

                            <!-- Botão Entrar -->
                            <div class="d-grid mb-3">
                                <button type="submit"
                                        class="btn btn-primary btn-lg"
                                        disabled="@isSubmitting">
                                    <span class="spinner-border spinner-border-sm me-1"
                                          hidden="@(!isSubmitting)"></span>
                                    <i class="bi bi-box-arrow-in-right me-1" hidden="@isSubmitting"></i>
                                    @(isSubmitting ? "Entrando..." : "Entrar")
                                </button>
                            </div>

                            <!-- Botão Criar Conta -->
                            <div class="d-grid">
                                <button type="button"
                                        class="btn btn-outline-secondary btn-lg"
                                        @onclick="CriarConta">
                                    <i class="bi bi-person-plus me-1"></i> Criar uma conta
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>




<script>
    function togglePassword(id) {
        const input = document.getElementById(id);
        const icon = input.nextElementSibling.querySelector('i');
        if (input.type === 'password')

    {
        input .type = 'text';
        icon .classList.remove('bi-eye');
        icon .classList.add('bi-eye-slash');
    }

    else {
        input .type = 'password';
        icon .classList.remove('bi-eye-slash');
        icon .classList.add('bi-eye');
    }
    }
</script>

@code {

    private bool isSubmitting = false;
    private UsuarioLoginDTO UsuarioLoginDTO = new UsuarioLoginDTO();

    protected override async Task OnInitializedAsync()
    {
        string? usuarioLogado = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "usuario");

        if (!string.IsNullOrEmpty(usuarioLogado))
        {
            UsuarioLoginDTO.login =  usuarioLogado.Replace("\"", "");
            
        }
    }

    private void CriarConta()
    {
        NavigationManager.NavigateTo("/cadastrar-usuario");
    }

    private async Task HandleSubmit()
    {
        try
        {
            var (sucesso, mensagemErro) = await iUsuarioService.LoginAsync(UsuarioLoginDTO);

            if (sucesso)
            {
                await notificacaoService.MostrarSucesso("Login realizado com sucesso!");

                Navigation.NavigateTo("/", forceLoad: true);

                // Navigation.NavigateTo("/tarefas");
            }
            else
            {
                await notificacaoService.MostrarErro(mensagemErro);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao realizar login: {ex.Message}");

            await notificacaoService.MostrarErro($"Ocorreu um erro interno. Nossa equipe já foi notificada.");
        }
    }
}
